#! /usr/bin/env python
# -*- coding: utf-8 -*-
'''Project Euler Problem 2: Even Fibonacci Numbers

Problem Description:
Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
By starting with $1$ and $2$, the first $10$ terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four 
million, find the sum of the even-valued terms.

Functions:
None
'''

__date__ = "20 December 2019"

# Notes:
#
# Note that if we consider that the first terms could also be written as 1, 1, 2, 3,...
# then every third term is even. The first solution does not exploit this, however,
# the alternate solution does. The efficiency is not shown until arouns the limit
# of 10**50000, where the alternative solution performs about 50% faster at 2 
# seconds total rather than 4.


# Import statments
import sys, os
sys.path.insert(0, sys.path[0][:-sys.path[0][::-1].find('\\')-1])
from modules.project_euler_functions import *

# User defined functions


# Solutions
def p2(limit: int = 4_000_000) -> int:
  """The solution.
  """
  result = 0
  a, b = 1, 2
  while b <= limit:
    if b % 2 == 0:
      result += b
    a, b = b, a + b
  return (result)


def p2alt(limit: int = 4_000_000) -> int:
  """Alternate solution.
  """
  result = 0
  a, b = 1, 2
  while b <= limit:
    result += b
    a, b = 2 * b + a, 3 * b + 2 * a
  return (result)


# Test cases
print(p2alt())
