#! /usr/bin/env python
# -*- coding: utf-8 -*-
'''Project Euler Problem 44: Pentagon Numbers

Problem Description:
Pentagonal numbers are generated by the formula, P_n=n(3n-1)/2. The first ten pentagonal
numbers are:
1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
It can be seen that P_4 + P_7 = 22 + 70 = 92 = P_8. However, their difference, 
70 - 22 = 48, is not pentagonal.
Find the pair of pentagonal numbers, P_j and P_k, for which their sum and difference are
pentagonal and D = |P_k - P_j| is minimised; what is the value of D?

Functions:
None
'''

__date__ = "7 September 2023"

# Notes:
#
#


# Import statments
import sys, os
sys.path.insert(0, sys.path[0][:-sys.path[0][::-1].find('\\')-1])
from modules.project_euler_functions import *

# User defined functions


# Solutions
def p44() -> int:
  """The solution.
  """
  pentagonals = {1}
  while True:
    next_pent = (len(pentagonals) + 1) * (3 * (len(pentagonals) + 1) - 1) // 2
    for pent in pentagonals:
      if next_pent - pent in pentagonals and not (
          1 + (1 + 24 * (next_pent + pent))**.5) % 6:
        return (next_pent - pent)
    pentagonals |= {next_pent}


def p44alt():
  """Alternate solution.
  """
  pass


# Test cases
print(p44())
