#! /usr/bin/env python
# -*- coding: utf-8 -*-
'''Project Euler Problem 12: Highly Divisible Triangular Number

Problem Description:
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th 
triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
 1 : 1
 3 : 1,3
 6 : 1,2,3,6
10 : 1,2,5,10
15 : 1,3,5,15
21 : 1,3,7,21
28 : 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?

Functions:
product
sqrt
factors
triangle_number
factor_count
'''

__date__ = "9 January 2020"

# Notes:
#
#


# Import statments
import sys, os
sys.path.insert(0, sys.path[0][:-sys.path[0][::-1].find('\\')-1])
from modules.project_euler_functions import product

# User defined functions


def sqrt(n: int | float, guess=0, accuracy=1.0) -> float:
  """Returns the square root of n that is acurate to +- the accuracy given.
  The process can be acelerated given a good guess.
  """
  cur = 1 if n - accuracy == 0 else n - accuracy if guess == 0 else guess
  prev = n
  while abs(cur - prev) >= accuracy:
    cur, prev = (cur + n / cur) / 2, cur
  return (cur)


def factors(n: int) -> dict[int, int]:
  '''Returns a distribution of prime factors.
  '''
  result = {}
  x = 2
  limit = int(sqrt(n)) + 1
  while x < limit:
    while n % x == 0:
      if x not in result:
        result[x] = 0
      result[x] += 1
      n //= x
      limit = int(sqrt(n)) + 1
    x += 1
  if n != 1:
    result[n] = 1
  return (result)


def triangle_number(n) -> int:
  """Returns the nth triangular number.
  """
  return ((1 + n) * n // 2)


def factor_count(n) -> int:
  """Returns the count of the number of values that are divisible.
  """
  result = 2
  index = 2
  while index <= n // index:
    if n % index == 0:
      if n // index == index:
        result += 1
      else:
        result += 2
    index += 1
  return (result)


# Solutions
def p12(limit: int = 500) -> int:
  """The solution.
  """
  n = 3
  while factor_count(triangle_number(n)) <= limit:
    n += 1
  return (triangle_number(n))


def p12alt(limit: int = 500) -> int:
  """Alternate solution.
  """
  n = 1
  result = 1
  while product(tuple(i + 1 for i in factors(result).values())) <= limit:
    n += 1
    result += n
  return (result)


# Test cases
print(p12alt())
