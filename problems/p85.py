#! /usr/bin/env python
# -*- coding: utf-8 -*-
'''Project Euler Problem 85: Counting Rectangles

Problem Description:
By counting carefully it can be seen that a rectangular grid measuring 3 by 2 contains
eighteen rectangles:

<img src="resources/images/0085.png?1678992052" class="dark_img" alt="">

Although there exists no rectangular grid that contains exactly two million rectangles,
find the area of the grid with the nearest solution.


Functions:
None
'''

__date__ = '13 March 2024'

# Notes:
#
#Count the number of rectangles directly, after abstracting the problem.
#Take the graphic on this problem and reflect it horizontally and vertically,
#this will result in the 2d matrix generated by this function.
#
#Slow.
def countRect(m: int,n: int):
    result=list()
    for i in range(1,m+1):
        result.append(list(range(1*i,(n+1)*i,i)))
    return(sum([sum(i) for i in result]))

#Note that for an m by n rectangle and a smaller i by j rectangle, where
#i<=m and j<=n, the smaller rectangle fits exactly (m-i)(n-j) times.
#
#Furthermore the first row is the sum of the integers up to and including n, 
#and similarly, the first column is the same but in terms of m.
#
#Focusing on rows, the second row is twice the first, third row is thrice.
#using this we can determine that the total of row 1 is:
#   (n+1)n/2
#Row 2:
#   2*(n+1)n/2
#Row 3:
#   3*(n+1)n/2
#... Row m:
#   m*(n+1)n/2
#
#The sum of all of these being:
#   (m+1)m/2 * (n+1)n/2
#This has been futher simplified
#
#Faster.
def calcRect(m: int,n: int):
    return( (m+1)*(n+1)*m*n//4 )


# Import statments
import sys, os
sys.path.insert(0, sys.path[0][:-sys.path[0][::-1].find('\\')-1])
from modules.project_euler_functions import *

# User defined functions


# Solutions
def p85(value: int = 2_000_000) -> int:
  """The solution.
  """
  result = {abs( i*(j := round((-1+(1+16*value/(i*(i+1)))**.5)/2))*(i+1)*(j+1)//4-value ) : (i,j) for i in range(1,round((value*4)**.25))}
  return((pair := result[min(result)])[0] * pair[1])


def p85alt():
  """Alternate solution.
  """
  pass


# Test cases
print(p85())
