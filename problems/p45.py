#! /usr/bin/env python
# -*- coding: utf-8 -*-
'''Project Euler Problem 45: Triangular, Pentagonal, and Hexagonal

Problem Description:
Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
Triangle    T_n=n(n+1)/2     1, 3, 6, 10, 15, ...
Pentagonal  P_n=n(3n - 1)/2  1, 5, 12, 22, 35, ...
Hexagonal   H_n=n(2n - 1)    1, 6, 15, 28, 45, ...
It can be verified that T_{285} = P_{165} = H_{143} = 40755.
Find the next triangle number that is also pentagonal and hexagonal.

Functions:
None
'''

__date__ = "7 September 2023"

# Notes:
#
# I am happy with this implimentation, though I have realized that
# all hexagonal numbers are triagular. See the second implimentaiton below.


# Import statments
import sys, os
sys.path.insert(0, sys.path[0][:-sys.path[0][::-1].find('\\')-1])
from modules.project_euler_functions import *

# User defined functions


# Solutions
def p45() -> int:
  """The solution.
  """
  n = 1
  result = set()
  while len(result) < 3:
    if not ((1 + 8 * n *
             (2 * n - 1))**.5 - 1) % 2 and not (1 + (1 + 24 * n *
                                                     (2 * n - 1))**.5) % 6:
      result |= {n * (2 * n - 1)}
    n += 1
  return (max(result))


def p45alt() -> int:
  """Alternate solution.
  """
  n = 1
  result = set()
  while len(result) < 3:
    if not (1 + (1 + 24 * n * (2 * n - 1))**.5) % 6:
      result |= {n * (2 * n - 1)}
    n += 1
  return (max(result))


# Test cases
print(p45alt())
