#! /usr/bin/env python
# -*- coding: utf-8 -*-
'''Project Euler Problem 61: Cyclical Figurate Numbers

Problem Description:
Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all
figurate (polygonal) numbers and are generated by the following formulae:
Triangle      P_{3,n}=n(n+1)/2      1, 3, 6,  10, 15, ...
Square        P_{4,n}=n**2          1, 4, 9,  16, 25, ...
Pentagonal    P_{5,n}=n(3n-1)/2     1, 5, 12, 22, 35, ...
Hexagonal     P_{6,n}=n(2n-1)       1, 6, 15, 28, 45, ...
Heptagonal    P_{7,n}=n(5n-3)/2     1, 7, 18, 34, 55, ...
Octagonal     P_{8,n}=n(3n-2)       1, 8, 21, 40, 65, ...
The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting
properties.

1. The set is cyclic, in that the last two digits of each number is the first two digits of
the next number (including the last number with the first).

2. Each polygonal type: triangle (P_{3,127}=8128), square (P_{4,91}=8281), and pentagonal
(P_{5,44}=2882), is represented by a different number in the set.

3. This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for which each
polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is
represented by a different number in the set.

Functions:
None
'''

__date__ = '23 November 2023'

# Notes:
#
#


# Import statments
import sys, os
sys.path.insert(0, sys.path[0][:-sys.path[0][::-1].find('\\')-1])
from modules.project_euler_functions import *


# User defined functions
def polygonals(s: int, limit: int) -> list:
  '''Generates the list of all s-gonal number up to the limit.
  '''
  result = []
  i = 1
  delta = s - 1
  while i <= limit:
    result.append(i)
    i += delta
    delta += s - 2
  return (result)


def recursivesearch(first, current, remainingsets):
  if len(remainingsets) == 1:
    possible = polysearch(current, remainingsets)
    for key in possible:
      for value in possible[key]:
        if first // 100 == value % 100:
          return ({value})
    return (set())
  else:
    possible = polysearch(current, remainingsets)
    for key in possible:
      for value in possible[key]:
        nextpossible = recursivesearch(first, value, remainingsets - {key})
        if nextpossible:
          return ({value} | nextpossible)
    return (set())


def polysearch(x, polysets):
  result = dict()
  for n in polysets:
    result |= {n: {i for i in polygen(n) if x % 100 == i // 100}}
  return (result)


def polygen(n, least=1000, most=10000):
  result = set()
  i = 1
  delta = n - 1
  while i <= most:
    if i >= least:
      result |= {i}
    i += delta
    delta += n - 2
  return (result)


# Solutions
def p61(cyclelength=6):
  """The solution.
  """
  polysets = set(range(3, 3 + cyclelength))
  polysets.remove(3)
  for i in polygen(3):
    if recursivesearch(i, i, polysets):
      return (sum({i} | recursivesearch(i, i, polysets)))


def p61alt():
  """Alternate solution.
  """
  pass


# Test cases
print(p61())
